/**
 * 
 */
package falstad;

import generation.Order;

import java.awt.event.KeyListener;
import java.io.File;

import javax.swing.JFrame;

/**
 * This class is a wrapper class to startup the Maze game as a Java application
 * 
 *
 * This code is refactored code from Maze.java by Paul Falstad, www.falstad.com,
 * Copyright (C) 1998, all rights reserved Paul Falstad granted permission to
 * modify and use code for teaching purposes. Refactored by Peter Kemper
 * 
 * : use logger for output instead of Sys.out
 */
public class MazeApplication extends JFrame {

	// not used, just to make the compiler, static code checker happy
	private static final long serialVersionUID = 1L;

	private KeyListener kl;

	// create a private variable called 'controller' of type MazeController (from
	// MazeController class)
	private MazeController controller;

	/**
	 * Constructor
	 */
	public MazeApplication() {
		// calling parent constructor with no arguments
		super();
		System.out.println("MazeApplication: maze will be generated with a randomized algorithm.");

		// initiate 'controller' variable
		controller = new MazeController();

		// initializes applet (?)
		init();
	}

	/**
	 * Constructor that loads a maze from a given file or uses a particular method
	 * to generate a maze
	 */
	public MazeApplication(String parameter) {
		// calling parent constructor
		super();

		// scan parameters
		// Case 1: Prim (one of the algorithms)
		// if the parameter is Prim
		if ("Prim".equalsIgnoreCase(parameter)) {
			System.out.println("MazeApplication: generating random maze with Prim's algorithm");
			// call MazeController class with parameter Prim and store it in 'controller'
			// variable
			// initialize then return

			new ManualDriver(controller);

			controller = new MazeController(Order.Builder.Prim);
			init();
			return;
		}
		// Case 2: Eller
		if ("Eller".equalsIgnoreCase(parameter)) {
			System.out.println("MazeApplication: generating random maze with Eller's algorithm");
			new ManualDriver(controller);
			controller = new MazeController(Order.Builder.Eller);

			// WHERE I'LL CALL MANUALDRIVER
			// this.robotDriver = new ManualDriver(controller);
			init();
			return;
		}

		// Case 3: a file
		// if a file providing a maze blueprint is provided then this case is used

		// store the file provided (which is passed through as a parameter) into the
		// variable f (of file type)
		File f = new File(parameter);
		// if this file exists and can be read...
		if (f.exists() && f.canRead()) {
			System.out.println("MazeApplication: loading maze from file: " + parameter);

			// call MazeController class with the file as the parameter and store that into
			// the controller variable
			controller = new MazeController(parameter);

			new ManualDriver(controller);

			init();
			return;
		}
		// Default case:
		// this is the case where there's no parameter given
		System.out.println(
				"MazeApplication: unknown parameter value: " + parameter + " ignored, operating in default mode.");
		// call MazeController Class and store result into controller variable
		controller = new MazeController();

		new ManualDriver(controller);

		init();
	}

	// -----------ADD NEW CONSTRUCTOR------------------------------
	public MazeApplication(String builder, String driver) {
		if ("Prim".equalsIgnoreCase(builder)) {
			System.out.println("MazeApplication: generating random maze with Prim's algorithm");
			// if ("Manual")
			controller = new MazeController(Order.Builder.Prim);
			init();
			return;
		}

	}

	/**
	 * Initializes some internals and puts the game on display.
	 */
	// this method is responsible for the display portion of the game
	private void init() {
		// controller is the initial starting state of the game
		add(controller.getPanel());

		kl = new SimpleKeyListener(this, controller); // THIS COULD BE WHY MY KEY INPUT DOESNT WORK!!!
		// SO WHAT IF I REPLACE CONTROLLER VARIABLE WITH A DRIVER VARIABLE???
		addKeyListener(kl);

		setSize(400, 400);
		setVisible(true);

		// focus should be on the JFrame of the MazeApplication and not on the maze
		// panel
		// such that the SimpleKeyListener kl is used
		setFocusable(true);

		controller.init();
	}

	/**
	 * Main method to launch Maze as a java application. The application can be
	 * operated in two ways. The intended normal operation is to provide no
	 * parameters and the maze will be generated by a particular algorithm. If a
	 * filename is given, the maze will be loaded from that file. The latter option
	 * is useful for development to check particular mazes.
	 * 
	 * @param args
	 *            is optional, first parameter is a filename with a given maze
	 */
	public static void main(String[] args) {
		// create object maze application called a (essentially create an instance of
		// the game)
		MazeApplication a;
		switch (args.length) {
		// case 1 is the game will have a specified argument (Prim, Ellers, or XML file)
		case 1:
			a = new MazeApplication(args[0]);
			break;
		// case 0 is the game will have no arguments (default game)
		case 0:
		default:
			a = new MazeApplication();
			break;
		}
		a.repaint();
	}

}
